指令：
1.v-once指令：一次性的插值，数据更新时，插值处内容不改变。
	      <P v-once>{{ msg }}</p>
2.v-html指令：将数据输出为html代码。(绝对不能使用用户提交的内容来插值，会被攻击)
	      <p v-html="msg"></p>
3.v-bind指令：（缩写：v-bind:href="..."等于 :href="..."）
	      该指令可用于响应式地更新HTML特性。如：<a v-bind:href="url">...</a>
4.v-on指令： (缩写： v-on:click="..." 等于  @click="...")
	      用于监听DOM事件。如：<a v-on:click="doSomeThing">...</a>
				

计算属性(computed)：
例：    var vm = new Vue({
          el: '#example',
          data: {
            goods: {id:1, name:"红烧牛肉面", price:5, amount:2}
          },
          methods:{
            total:function(){
              return this.goods.price*this.goods.amount;
            }
          },
          computed: {
            // 计算属性的 getter
            total: function () {
              // `this` 指向 vm 实例
              return this.goods.price*this.goods.amount;
            }
          }
        })
        <div id="example">
            <p>您购买了{{ goods.amount }}份{{ goods.name }}---共计{{ total }}元。</p>
            <p>总共花费了{{ total() }}元。</p>
        </div>
1.Vue知道vm.total中的数据依赖于vm.goods,因此当vm.goods改变时，所有依赖于该计算属性的绑定也会更新。
2.使用Vue中的数据，计算后返回所需要的值，使视图层代码更精简，易于维护。
3.提供的函数作为vm.total属性的getter函数。
4.computed VS methods
  可以将同一个函数定义为方法，这样产生的效果与计算属性是相同的。
  但是，计算属性是基于他们的依赖进行缓存的，计算属性只有在相关依赖发生改变时才重新求值。
  相比之下，每当触发重新渲染时，调用方法将总会再次执行函数。


数据绑定：
1.对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。
	{{ number + 1 }}

	{{ ok ? 'YES' : 'NO' }}

	{{ message.split('').reverse().join('') }}

	<div v-bind:id="'list-' + id"></div>
这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的两个例子都不会生效。

		{{ var a = 1 }} <!-- 这是语句，不是表达式 -->

		{{ if (ok) { return message } }} <!-- 流控制也不会生效，请使用三元表达式 -->

tip:模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 Math 和 Date 。不应该在模板表达式中试图访问用户定义的全局变量。
